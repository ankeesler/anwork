/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

// Apply the checkstyle plugin
apply plugin: 'checkstyle'

// Apply the Protocol Buffers plugin
apply plugin: 'com.google.protobuf'

// Apply the JaCoCo plugin
apply plugin: 'jacoco'

// Set the default task
defaultTasks 'check'

// Define the main class for the application
mainClassName = 'com.marshmallow.anwork.app.AnworkApp'

// Declare some dependencies for this build.gradle file
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

sourceSets {
    // Define a smokeTest source set that contains the smoketest runner code
    smokeTest
    test {
        // Put the test resources into the same directory as classes so that our test run the same
        // way as they do in Eclipse
        output.resourcesDir = output.classesDir
    }
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:21.0'

    // This dependency is needed for the generated Protocol Buffer code.
    compile 'com.google.protobuf:protobuf-java:3.4.0'

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
    smokeTestCompile 'junit:junit:4.12'
}

// Generate the Protocol Buffer code into the source directory so that we can pull it into the Eclipse build.
protobuf {
    generatedFilesBaseDir = 'src'
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
}

// ------------------------------------------------------------------------------------------------
// Section - Documentation

// Filter out Protocol Buffers generated classes in Javadoc
javadoc {
    exclude 'com/marshmallow/anwork/**/protobuf/**.java'
}

// Run the AnworkCliDocumentationGenerator to regenerate the CLI.md file
task generateCliDocumentation(type: JavaExec) {
  group 'Documentation'
  description 'Generate the ANWORK CLI documentation markdown file.'
  classpath sourceSets.main.runtimeClasspath
  main = 'com.marshmallow.anwork.app.AnworkCliDocumentationGenerator'
}

task doc(dependsOn: ['javadoc', 'generateCliDocumentation']) {
}

// ------------------------------------------------------------------------------------------------
// Section - Packaging

// Create a jar with the correct so that users can easily run this app
jar {
    manifest {
        attributes("Main-Class": "com.marshmallow.anwork.app.AnworkApp")
    }
}

// Include the ANWORK CLI documentation file in distributions
applicationDistribution.from('.') {
  include 'doc/CLI.md'
  include 'doc/CLI-OVERVIEW.md'
}

// Creating a distribution package should depend on documentation generation
installDist.dependsOn doc

// ------------------------------------------------------------------------------------------------
// Section - Testing

def smoketestDir = "$buildDir/smoketest"

// This is the checkstyle configuration
checkstyle {
    configFile = file('checkstyle.xml')
    toolVersion = "8.2"
    ignoreFailures = false
    showViolations = true
}

// Ignore the generated Protocol Buffer code, which doesn't follow some pieces of the coding standard.
[checkstyleMain, checkstyleTest].each() {
    it.exclude 'com/marshmallow/anwork/**/protobuf/**.java'
}

// Filter out test superclasses
test {
    include 'com/marshmallow/anwork/core/test/AllTests**'
}

task stageSmoke(dependsOn: installDist, type: Sync) {
  from "$buildDir/install"
  into smoketestDir
}

task smoke(dependsOn: stageSmoke, type: Test) {
  testClassesDir = sourceSets.smokeTest.output.classesDir
  classpath = sourceSets.smokeTest.runtimeClasspath
  environment "ANWORK_SMOKETEST_DIR", smoketestDir
  testLogging.showStandardStreams = true
  outputs.upToDateWhen { false }
}

jacocoTestReport {
  reports {
    html.enabled = true
    xml.enabled = true
  }
}
