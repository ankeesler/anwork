// Code generated by counterfeiter. DO NOT EDIT.
package remotefakes

import (
	"sync"

	"github.com/ankeesler/anwork/task"
	"github.com/ankeesler/anwork/task/remote"
)

type FakeAPIClient struct {
	CreateTaskStub        func(string) error
	createTaskMutex       sync.RWMutex
	createTaskArgsForCall []struct {
		arg1 string
	}
	createTaskReturns struct {
		result1 error
	}
	createTaskReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteTaskStub        func(int) error
	deleteTaskMutex       sync.RWMutex
	deleteTaskArgsForCall []struct {
		arg1 int
	}
	deleteTaskReturns struct {
		result1 error
	}
	deleteTaskReturnsOnCall map[int]struct {
		result1 error
	}
	GetTasksStub        func() ([]*task.Task, error)
	getTasksMutex       sync.RWMutex
	getTasksArgsForCall []struct{}
	getTasksReturns     struct {
		result1 []*task.Task
		result2 error
	}
	getTasksReturnsOnCall map[int]struct {
		result1 []*task.Task
		result2 error
	}
	GetTaskStub        func(int) (*task.Task, error)
	getTaskMutex       sync.RWMutex
	getTaskArgsForCall []struct {
		arg1 int
	}
	getTaskReturns struct {
		result1 *task.Task
		result2 error
	}
	getTaskReturnsOnCall map[int]struct {
		result1 *task.Task
		result2 error
	}
	UpdatePriorityStub        func(int, int) error
	updatePriorityMutex       sync.RWMutex
	updatePriorityArgsForCall []struct {
		arg1 int
		arg2 int
	}
	updatePriorityReturns struct {
		result1 error
	}
	updatePriorityReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateStateStub        func(int, task.State) error
	updateStateMutex       sync.RWMutex
	updateStateArgsForCall []struct {
		arg1 int
		arg2 task.State
	}
	updateStateReturns struct {
		result1 error
	}
	updateStateReturnsOnCall map[int]struct {
		result1 error
	}
	GetEventsStub        func() ([]*task.Event, error)
	getEventsMutex       sync.RWMutex
	getEventsArgsForCall []struct{}
	getEventsReturns     struct {
		result1 []*task.Event
		result2 error
	}
	getEventsReturnsOnCall map[int]struct {
		result1 []*task.Event
		result2 error
	}
	DeleteEventStub        func(int64) error
	deleteEventMutex       sync.RWMutex
	deleteEventArgsForCall []struct {
		arg1 int64
	}
	deleteEventReturns struct {
		result1 error
	}
	deleteEventReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPIClient) CreateTask(arg1 string) error {
	fake.createTaskMutex.Lock()
	ret, specificReturn := fake.createTaskReturnsOnCall[len(fake.createTaskArgsForCall)]
	fake.createTaskArgsForCall = append(fake.createTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("CreateTask", []interface{}{arg1})
	fake.createTaskMutex.Unlock()
	if fake.CreateTaskStub != nil {
		return fake.CreateTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createTaskReturns.result1
}

func (fake *FakeAPIClient) CreateTaskCallCount() int {
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	return len(fake.createTaskArgsForCall)
}

func (fake *FakeAPIClient) CreateTaskArgsForCall(i int) string {
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	return fake.createTaskArgsForCall[i].arg1
}

func (fake *FakeAPIClient) CreateTaskReturns(result1 error) {
	fake.CreateTaskStub = nil
	fake.createTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPIClient) CreateTaskReturnsOnCall(i int, result1 error) {
	fake.CreateTaskStub = nil
	if fake.createTaskReturnsOnCall == nil {
		fake.createTaskReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createTaskReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPIClient) DeleteTask(arg1 int) error {
	fake.deleteTaskMutex.Lock()
	ret, specificReturn := fake.deleteTaskReturnsOnCall[len(fake.deleteTaskArgsForCall)]
	fake.deleteTaskArgsForCall = append(fake.deleteTaskArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("DeleteTask", []interface{}{arg1})
	fake.deleteTaskMutex.Unlock()
	if fake.DeleteTaskStub != nil {
		return fake.DeleteTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteTaskReturns.result1
}

func (fake *FakeAPIClient) DeleteTaskCallCount() int {
	fake.deleteTaskMutex.RLock()
	defer fake.deleteTaskMutex.RUnlock()
	return len(fake.deleteTaskArgsForCall)
}

func (fake *FakeAPIClient) DeleteTaskArgsForCall(i int) int {
	fake.deleteTaskMutex.RLock()
	defer fake.deleteTaskMutex.RUnlock()
	return fake.deleteTaskArgsForCall[i].arg1
}

func (fake *FakeAPIClient) DeleteTaskReturns(result1 error) {
	fake.DeleteTaskStub = nil
	fake.deleteTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPIClient) DeleteTaskReturnsOnCall(i int, result1 error) {
	fake.DeleteTaskStub = nil
	if fake.deleteTaskReturnsOnCall == nil {
		fake.deleteTaskReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteTaskReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPIClient) GetTasks() ([]*task.Task, error) {
	fake.getTasksMutex.Lock()
	ret, specificReturn := fake.getTasksReturnsOnCall[len(fake.getTasksArgsForCall)]
	fake.getTasksArgsForCall = append(fake.getTasksArgsForCall, struct{}{})
	fake.recordInvocation("GetTasks", []interface{}{})
	fake.getTasksMutex.Unlock()
	if fake.GetTasksStub != nil {
		return fake.GetTasksStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getTasksReturns.result1, fake.getTasksReturns.result2
}

func (fake *FakeAPIClient) GetTasksCallCount() int {
	fake.getTasksMutex.RLock()
	defer fake.getTasksMutex.RUnlock()
	return len(fake.getTasksArgsForCall)
}

func (fake *FakeAPIClient) GetTasksReturns(result1 []*task.Task, result2 error) {
	fake.GetTasksStub = nil
	fake.getTasksReturns = struct {
		result1 []*task.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) GetTasksReturnsOnCall(i int, result1 []*task.Task, result2 error) {
	fake.GetTasksStub = nil
	if fake.getTasksReturnsOnCall == nil {
		fake.getTasksReturnsOnCall = make(map[int]struct {
			result1 []*task.Task
			result2 error
		})
	}
	fake.getTasksReturnsOnCall[i] = struct {
		result1 []*task.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) GetTask(arg1 int) (*task.Task, error) {
	fake.getTaskMutex.Lock()
	ret, specificReturn := fake.getTaskReturnsOnCall[len(fake.getTaskArgsForCall)]
	fake.getTaskArgsForCall = append(fake.getTaskArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("GetTask", []interface{}{arg1})
	fake.getTaskMutex.Unlock()
	if fake.GetTaskStub != nil {
		return fake.GetTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getTaskReturns.result1, fake.getTaskReturns.result2
}

func (fake *FakeAPIClient) GetTaskCallCount() int {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	return len(fake.getTaskArgsForCall)
}

func (fake *FakeAPIClient) GetTaskArgsForCall(i int) int {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	return fake.getTaskArgsForCall[i].arg1
}

func (fake *FakeAPIClient) GetTaskReturns(result1 *task.Task, result2 error) {
	fake.GetTaskStub = nil
	fake.getTaskReturns = struct {
		result1 *task.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) GetTaskReturnsOnCall(i int, result1 *task.Task, result2 error) {
	fake.GetTaskStub = nil
	if fake.getTaskReturnsOnCall == nil {
		fake.getTaskReturnsOnCall = make(map[int]struct {
			result1 *task.Task
			result2 error
		})
	}
	fake.getTaskReturnsOnCall[i] = struct {
		result1 *task.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) UpdatePriority(arg1 int, arg2 int) error {
	fake.updatePriorityMutex.Lock()
	ret, specificReturn := fake.updatePriorityReturnsOnCall[len(fake.updatePriorityArgsForCall)]
	fake.updatePriorityArgsForCall = append(fake.updatePriorityArgsForCall, struct {
		arg1 int
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("UpdatePriority", []interface{}{arg1, arg2})
	fake.updatePriorityMutex.Unlock()
	if fake.UpdatePriorityStub != nil {
		return fake.UpdatePriorityStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updatePriorityReturns.result1
}

func (fake *FakeAPIClient) UpdatePriorityCallCount() int {
	fake.updatePriorityMutex.RLock()
	defer fake.updatePriorityMutex.RUnlock()
	return len(fake.updatePriorityArgsForCall)
}

func (fake *FakeAPIClient) UpdatePriorityArgsForCall(i int) (int, int) {
	fake.updatePriorityMutex.RLock()
	defer fake.updatePriorityMutex.RUnlock()
	return fake.updatePriorityArgsForCall[i].arg1, fake.updatePriorityArgsForCall[i].arg2
}

func (fake *FakeAPIClient) UpdatePriorityReturns(result1 error) {
	fake.UpdatePriorityStub = nil
	fake.updatePriorityReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPIClient) UpdatePriorityReturnsOnCall(i int, result1 error) {
	fake.UpdatePriorityStub = nil
	if fake.updatePriorityReturnsOnCall == nil {
		fake.updatePriorityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updatePriorityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPIClient) UpdateState(arg1 int, arg2 task.State) error {
	fake.updateStateMutex.Lock()
	ret, specificReturn := fake.updateStateReturnsOnCall[len(fake.updateStateArgsForCall)]
	fake.updateStateArgsForCall = append(fake.updateStateArgsForCall, struct {
		arg1 int
		arg2 task.State
	}{arg1, arg2})
	fake.recordInvocation("UpdateState", []interface{}{arg1, arg2})
	fake.updateStateMutex.Unlock()
	if fake.UpdateStateStub != nil {
		return fake.UpdateStateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateStateReturns.result1
}

func (fake *FakeAPIClient) UpdateStateCallCount() int {
	fake.updateStateMutex.RLock()
	defer fake.updateStateMutex.RUnlock()
	return len(fake.updateStateArgsForCall)
}

func (fake *FakeAPIClient) UpdateStateArgsForCall(i int) (int, task.State) {
	fake.updateStateMutex.RLock()
	defer fake.updateStateMutex.RUnlock()
	return fake.updateStateArgsForCall[i].arg1, fake.updateStateArgsForCall[i].arg2
}

func (fake *FakeAPIClient) UpdateStateReturns(result1 error) {
	fake.UpdateStateStub = nil
	fake.updateStateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPIClient) UpdateStateReturnsOnCall(i int, result1 error) {
	fake.UpdateStateStub = nil
	if fake.updateStateReturnsOnCall == nil {
		fake.updateStateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateStateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPIClient) GetEvents() ([]*task.Event, error) {
	fake.getEventsMutex.Lock()
	ret, specificReturn := fake.getEventsReturnsOnCall[len(fake.getEventsArgsForCall)]
	fake.getEventsArgsForCall = append(fake.getEventsArgsForCall, struct{}{})
	fake.recordInvocation("GetEvents", []interface{}{})
	fake.getEventsMutex.Unlock()
	if fake.GetEventsStub != nil {
		return fake.GetEventsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getEventsReturns.result1, fake.getEventsReturns.result2
}

func (fake *FakeAPIClient) GetEventsCallCount() int {
	fake.getEventsMutex.RLock()
	defer fake.getEventsMutex.RUnlock()
	return len(fake.getEventsArgsForCall)
}

func (fake *FakeAPIClient) GetEventsReturns(result1 []*task.Event, result2 error) {
	fake.GetEventsStub = nil
	fake.getEventsReturns = struct {
		result1 []*task.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) GetEventsReturnsOnCall(i int, result1 []*task.Event, result2 error) {
	fake.GetEventsStub = nil
	if fake.getEventsReturnsOnCall == nil {
		fake.getEventsReturnsOnCall = make(map[int]struct {
			result1 []*task.Event
			result2 error
		})
	}
	fake.getEventsReturnsOnCall[i] = struct {
		result1 []*task.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIClient) DeleteEvent(arg1 int64) error {
	fake.deleteEventMutex.Lock()
	ret, specificReturn := fake.deleteEventReturnsOnCall[len(fake.deleteEventArgsForCall)]
	fake.deleteEventArgsForCall = append(fake.deleteEventArgsForCall, struct {
		arg1 int64
	}{arg1})
	fake.recordInvocation("DeleteEvent", []interface{}{arg1})
	fake.deleteEventMutex.Unlock()
	if fake.DeleteEventStub != nil {
		return fake.DeleteEventStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteEventReturns.result1
}

func (fake *FakeAPIClient) DeleteEventCallCount() int {
	fake.deleteEventMutex.RLock()
	defer fake.deleteEventMutex.RUnlock()
	return len(fake.deleteEventArgsForCall)
}

func (fake *FakeAPIClient) DeleteEventArgsForCall(i int) int64 {
	fake.deleteEventMutex.RLock()
	defer fake.deleteEventMutex.RUnlock()
	return fake.deleteEventArgsForCall[i].arg1
}

func (fake *FakeAPIClient) DeleteEventReturns(result1 error) {
	fake.DeleteEventStub = nil
	fake.deleteEventReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPIClient) DeleteEventReturnsOnCall(i int, result1 error) {
	fake.DeleteEventStub = nil
	if fake.deleteEventReturnsOnCall == nil {
		fake.deleteEventReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteEventReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAPIClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	fake.deleteTaskMutex.RLock()
	defer fake.deleteTaskMutex.RUnlock()
	fake.getTasksMutex.RLock()
	defer fake.getTasksMutex.RUnlock()
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	fake.updatePriorityMutex.RLock()
	defer fake.updatePriorityMutex.RUnlock()
	fake.updateStateMutex.RLock()
	defer fake.updateStateMutex.RUnlock()
	fake.getEventsMutex.RLock()
	defer fake.getEventsMutex.RUnlock()
	fake.deleteEventMutex.RLock()
	defer fake.deleteEventMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPIClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ remote.APIClient = new(FakeAPIClient)
