// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	task.proto

It has these top-level messages:
	Task
	Event
	Journal
	Manager
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type State int32

const (
	State_WAITING  State = 0
	State_BLOCKED  State = 1
	State_RUNNING  State = 2
	State_FINISHED State = 3
)

var State_name = map[int32]string{
	0: "WAITING",
	1: "BLOCKED",
	2: "RUNNING",
	3: "FINISHED",
}
var State_value = map[string]int32{
	"WAITING":  0,
	"BLOCKED":  1,
	"RUNNING":  2,
	"FINISHED": 3,
}

func (x State) String() string {
	return proto1.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EventType int32

const (
	EventType_CREATE       EventType = 0
	EventType_DELETE       EventType = 1
	EventType_SET_STATE    EventType = 2
	EventType_NOTE         EventType = 3
	EventType_SET_PRIORITY EventType = 4
)

var EventType_name = map[int32]string{
	0: "CREATE",
	1: "DELETE",
	2: "SET_STATE",
	3: "NOTE",
	4: "SET_PRIORITY",
}
var EventType_value = map[string]int32{
	"CREATE":       0,
	"DELETE":       1,
	"SET_STATE":    2,
	"NOTE":         3,
	"SET_PRIORITY": 4,
}

func (x EventType) String() string {
	return proto1.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Task struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id          int32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	StartDate   int64  `protobuf:"varint,4,opt,name=startDate" json:"startDate,omitempty"`
	Priority    int32  `protobuf:"varint,5,opt,name=priority" json:"priority,omitempty"`
	State       State  `protobuf:"varint,6,opt,name=state,enum=State" json:"state,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto1.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Task) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Task) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *Task) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Task) GetState() State {
	if m != nil {
		return m.State
	}
	return State_WAITING
}

type Event struct {
	Title  string    `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Type   EventType `protobuf:"varint,2,opt,name=type,enum=EventType" json:"type,omitempty"`
	Date   int64     `protobuf:"varint,3,opt,name=date" json:"date,omitempty"`
	TaskId int32     `protobuf:"varint,4,opt,name=taskId" json:"taskId,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto1.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Event) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Event) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_CREATE
}

func (m *Event) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *Event) GetTaskId() int32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

type Journal struct {
	Events []*Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *Journal) Reset()                    { *m = Journal{} }
func (m *Journal) String() string            { return proto1.CompactTextString(m) }
func (*Journal) ProtoMessage()               {}
func (*Journal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Journal) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type Manager struct {
	Tasks   []*Task  `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
	Journal *Journal `protobuf:"bytes,2,opt,name=journal" json:"journal,omitempty"`
}

func (m *Manager) Reset()                    { *m = Manager{} }
func (m *Manager) String() string            { return proto1.CompactTextString(m) }
func (*Manager) ProtoMessage()               {}
func (*Manager) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Manager) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *Manager) GetJournal() *Journal {
	if m != nil {
		return m.Journal
	}
	return nil
}

func init() {
	proto1.RegisterType((*Task)(nil), "Task")
	proto1.RegisterType((*Event)(nil), "Event")
	proto1.RegisterType((*Journal)(nil), "Journal")
	proto1.RegisterType((*Manager)(nil), "Manager")
	proto1.RegisterEnum("State", State_name, State_value)
	proto1.RegisterEnum("EventType", EventType_name, EventType_value)
}

func init() { proto1.RegisterFile("task.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x52, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0xad, 0x93, 0x38, 0xd9, 0x9d, 0x2d, 0x2b, 0x6b, 0x84, 0x50, 0x04, 0x55, 0x15, 0xe5, 0x14,
	0x7a, 0xc8, 0x61, 0xb9, 0x72, 0x69, 0xbb, 0x06, 0x52, 0x4a, 0x16, 0x39, 0x46, 0x08, 0x2e, 0xc8,
	0x10, 0x0b, 0x99, 0x96, 0x24, 0x4a, 0x0c, 0xd2, 0xfe, 0x0f, 0x1f, 0x8a, 0xec, 0xec, 0x16, 0x4e,
	0x99, 0xf7, 0xde, 0xcc, 0xcb, 0x9b, 0x91, 0x01, 0xac, 0x9a, 0xee, 0xca, 0x61, 0xec, 0x6d, 0x9f,
	0xff, 0x21, 0x10, 0x49, 0x35, 0xdd, 0x21, 0x42, 0xd4, 0xa9, 0x9f, 0x3a, 0x25, 0x19, 0x29, 0x96,
	0xc2, 0xd7, 0xb8, 0x86, 0xc0, 0xb4, 0x69, 0x90, 0x91, 0x82, 0x8a, 0xc0, 0xb4, 0x98, 0xc1, 0xaa,
	0xd5, 0xd3, 0xb7, 0xd1, 0x0c, 0xd6, 0xf4, 0x5d, 0x1a, 0xfa, 0xd6, 0xff, 0x29, 0x3c, 0x83, 0xe5,
	0x64, 0xd5, 0x68, 0xb7, 0xca, 0xea, 0x34, 0xca, 0x48, 0x11, 0x8a, 0x7f, 0x04, 0x3e, 0x85, 0xc5,
	0x30, 0x9a, 0x7e, 0x34, 0x76, 0x9f, 0x52, 0xef, 0xfa, 0x80, 0xf1, 0x0c, 0xe8, 0x64, 0xdd, 0x54,
	0x9c, 0x91, 0x62, 0xbd, 0x89, 0xcb, 0xc6, 0x21, 0x31, 0x93, 0xb9, 0x01, 0xca, 0x7f, 0xeb, 0xce,
	0xe2, 0x63, 0xa0, 0xd6, 0xd8, 0xfb, 0x63, 0xce, 0x19, 0xe0, 0x39, 0x44, 0x76, 0x3f, 0x68, 0x1f,
	0x75, 0xbd, 0x81, 0xd2, 0xf7, 0xca, 0xfd, 0xa0, 0x85, 0xe7, 0xdd, 0x72, 0xad, 0xf3, 0x0e, 0x7d,
	0x22, 0x5f, 0xe3, 0x13, 0x88, 0xdd, 0x1d, 0xaa, 0xd6, 0xe7, 0xa4, 0xe2, 0x80, 0xf2, 0xe7, 0x90,
	0xdc, 0xf4, 0xbf, 0xc6, 0x4e, 0xdd, 0xe3, 0x39, 0xc4, 0xda, 0x39, 0x4d, 0x29, 0xc9, 0xc2, 0x62,
	0xb5, 0x89, 0x67, 0x63, 0x71, 0x60, 0xf3, 0x1b, 0x48, 0xde, 0xa9, 0x4e, 0x7d, 0xd7, 0x23, 0x3e,
	0x03, 0xea, 0xe6, 0x8f, 0x9d, 0xb4, 0x74, 0x47, 0x15, 0x33, 0x87, 0x39, 0x24, 0x3f, 0x66, 0x4b,
	0x9f, 0x70, 0xb5, 0x59, 0x94, 0x87, 0x5f, 0x88, 0xa3, 0x70, 0xf1, 0x12, 0xa8, 0xdf, 0x18, 0x57,
	0x90, 0x7c, 0xbc, 0xac, 0x64, 0x55, 0xbf, 0x66, 0x27, 0x0e, 0x5c, 0xdd, 0xee, 0xae, 0xdf, 0xf2,
	0x2d, 0x23, 0x0e, 0x88, 0x0f, 0x75, 0xed, 0x94, 0x00, 0x4f, 0x61, 0xf1, 0xaa, 0xaa, 0xab, 0xe6,
	0x0d, 0xdf, 0xb2, 0xf0, 0xa2, 0x86, 0xe5, 0xc3, 0xce, 0x08, 0x10, 0x5f, 0x0b, 0x7e, 0x29, 0x39,
	0x3b, 0x71, 0xf5, 0x96, 0xdf, 0x72, 0xc9, 0x19, 0xc1, 0x47, 0xb0, 0x6c, 0xb8, 0xfc, 0xd2, 0x48,
	0x27, 0x05, 0xb8, 0x80, 0xa8, 0xde, 0x49, 0xce, 0x42, 0x64, 0x70, 0xea, 0x84, 0xf7, 0xa2, 0xda,
	0x89, 0x4a, 0x7e, 0x62, 0xd1, 0x55, 0xf2, 0x99, 0xfa, 0xf7, 0xf1, 0x35, 0xf6, 0x9f, 0x17, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xa4, 0xa3, 0x60, 0x34, 0x02, 0x00, 0x00,
}
